{"version":3,"sources":["pages/RulePage.tsx","components/TournamentBracket/GameNode.tsx","components/TournamentBracket/index.tsx","utils/ResultResolver.ts","components/TournamentBoard.tsx","components/TournamentBracket/TreeMaker.ts","utils/Constants.ts","utils/API.ts","pages/Tournament.tsx","App.tsx","index.tsx"],"names":["RulePage","Container","maxWidth","CssBaseline","Typography","component","variant","align","color","gutterBottom","Link","href","useStyle","makeStyles","red","orange","yellow","blue","lightBlue","green","brown","grey","RatingName","props","c","classes","rating","getRating","children","className","GameNode","node","length","name","map","i","key","TournamentBracket","root","resolveTournament","pickWinnerId","resolveByDfs","depth","maxDepth","index","child","childrenNames","getDepth","forEach","Math","max","TournamentBoard","atCoderUserIds","contestResults","ratingMap","players","leafCount","leafPlayers","player1","player2","push","currentPlayers","nextPlayers","node1","node2","makeTree","resolvedRoot","ranks","nextRank","size","get","ratings","userId","rank","sort","a","b","fetchFixedUserList","seasonId","fetch","then","response","json","userIds","fetchRatingMap","allUsers","userMap","Map","user","set","user_id","Promise","all","registeredUsers","validUsers","localeCompare","useStyles","theme","heroContent","padding","spacing","Tournament","useState","setAtCoderUserIds","undefined","setRatingMap","setContestResults","selectedDivision","setSelectedDivision","useEffect","fetchOrderedUserList","users","fetchContestResults","maps","divisionCount","ceil","divisionMembers","divisions","division","reverse","Grid","container","justify","direction","Tabs","value","onChange","e","v","centered","d","Tab","label","createMuiTheme","palette","type","appBar","borderBottom","divider","toolbar","flexWrap","toolbarTitle","flexGrow","textDecoration","link","margin","cardHeader","backgroundColor","cardPricing","display","justifyContent","alignItems","marginBottom","footer","borderTop","marginTop","paddingTop","paddingBottom","breakpoints","up","App","now","Date","AppBar","position","elevation","Toolbar","RouterLink","noWrap","to","exact","path","render","match","params","id","toString","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01609b4e.chunk.js","sourcesContent":["import { Container, CssBaseline, Link, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const RulePage = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <CssBaseline />\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        align=\"center\"\n        color=\"textPrimary\"\n        gutterBottom\n      >\n        ABC Tournament ルール\n      </Typography>\n      <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n        <ul>\n          <li>ABC の結果を使ったトーナメント戦です。</li>\n          <li>\n            各試合は 1 対 1 で行われ、AtCoder の ABC\n            級のコンテストでの順位が高かった方が勝者となり、次の試合に進出します。\n          </li>\n          <li>\n            ABC級のコンテストとはレーティング更新対象が 0 - 1999\n            のコンテストです。\n          </li>\n          <li>\n            同順位の場合は2020年8月29日 19:00\n            JST時点でのレートが高い方を勝者とします。\n          </li>\n          <li>\n            コンテストにおいて以下に該当するユーザーは\n            (コンテストで正の点数を取った人数 + 1) 位となります。\n            <ul>\n              <li>コンテストに参加登録していないユーザー</li>\n              <li>コンテストに参加登録したが1回も提出していないユーザー</li>\n              <li>\n                コンテストに参加登録し、1回以上提出したが点数が得られなかったユーザー\n              </li>\n            </ul>\n          </li>\n          <li>\n            各試合の対象となる ABC は以下のとおりです。\n            <ul>\n              <li>\n                1 回戦 -{\" \"}\n                <Link href=\"https://atcoder.jp/contests/abc177\">\n                  AtCoder Beginner Contest 177\n                </Link>\n              </li>\n              <li>2 回戦以降 - AtCoder からアナウンスがあり次第更新します。</li>\n            </ul>\n          </li>\n        </ul>\n      </Typography>\n    </Container>\n  );\n};\n","import { Link } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { BracketNode } from \"./index\";\nimport {\n  red,\n  orange,\n  yellow,\n  blue,\n  lightBlue,\n  green,\n  brown,\n  grey,\n} from \"@material-ui/core/colors\";\nconst useStyle = makeStyles(() => ({\n  red: {\n    color: red[500],\n  },\n  orange: {\n    color: orange[500],\n  },\n  yellow: {\n    color: yellow[500],\n  },\n  blue: {\n    color: blue[800],\n  },\n  lightBlue: {\n    color: lightBlue[300],\n  },\n  green: {\n    color: green[400],\n  },\n  brown: {\n    color: brown[400],\n  },\n  grey: {\n    color: grey[500],\n  },\n}));\n\nconst RatingName = (props: {\n  children: string;\n  getRating: (userId: string) => number | undefined;\n}) => {\n  const classes = useStyle();\n  const rating = props.getRating(props.children);\n  if (!rating) {\n    return <p>{props.children}</p>;\n  }\n  let c: string;\n  if (rating < 400) {\n    c = classes.grey;\n  } else if (rating < 800) {\n    c = classes.brown;\n  } else if (rating < 1200) {\n    c = classes.green;\n  } else if (rating < 1600) {\n    c = classes.lightBlue;\n  } else if (rating < 2000) {\n    c = classes.blue;\n  } else if (rating < 2400) {\n    c = classes.yellow;\n  } else if (rating < 2800) {\n    c = classes.orange;\n  } else {\n    c = classes.red;\n  }\n  return (\n    <p>\n      <Link className={c} href={`https://atcoder.jp/users/${props.children}`}>\n        {props.children}\n      </Link>\n    </p>\n  );\n};\n\ninterface Props {\n  node: BracketNode;\n  getRating: (userId: string) => number | undefined;\n}\n\nexport const GameNode = (props: Props) => {\n  if (props.node.children.length === 0) {\n    return (\n      <RatingName getRating={props.getRating}>{props.node.name}</RatingName>\n    );\n  } else {\n    return (\n      <div className=\"item\">\n        <div className=\"item-parent\">\n          <RatingName getRating={props.getRating}>{props.node.name}</RatingName>\n        </div>\n        <div className=\"item-children\">\n          {props.node.children.map((node, i) => (\n            <div key={i} className=\"item-child\">\n              <GameNode getRating={props.getRating} node={node} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n","import React from \"react\";\nimport { GameNode } from \"./GameNode\";\n\nexport interface BracketNode {\n  name: string;\n  children: BracketNode[];\n}\n\ninterface Props {\n  root: BracketNode;\n  getRating: (userId: string) => number | undefined;\n}\n\nexport const TournamentBracket = (props: Props) => {\n  return (\n    <div className=\"wrapper\">\n      <GameNode getRating={props.getRating} node={props.root} />\n    </div>\n  );\n};\n","import { BracketNode } from \"../components/TournamentBracket\";\n\nconst getDepth = (node: BracketNode, depth: number) => {\n  let maxDepth = depth;\n  node.children.forEach((child) => {\n    maxDepth = Math.max(getDepth(child, depth + 1), maxDepth);\n  });\n  return maxDepth;\n};\n\nconst resolveByDfs = (\n  node: BracketNode,\n  depth: number,\n  maxDepth: number,\n  pickWinnerId: (index: number, userIds: string[]) => string\n): BracketNode => {\n  const index = maxDepth - depth - 1;\n  const children = node.children.map((child) =>\n    resolveByDfs(child, depth + 1, maxDepth, pickWinnerId)\n  );\n  const childrenNames = children.map((child) => child.name);\n  const name =\n    childrenNames.length === 0 ? node.name : pickWinnerId(index, childrenNames);\n  return { name, children };\n};\n\nexport const resolveTournament = (\n  root: BracketNode,\n  pickWinnerId: (index: number, userIds: string[]) => string\n) => {\n  const depth = getDepth(root, 0);\n  return resolveByDfs(root, 0, depth, pickWinnerId);\n};\n","import React from \"react\";\nimport { TournamentBracket } from \"./TournamentBracket\";\nimport { makeTree } from \"./TournamentBracket/TreeMaker\";\nimport { UNDEFINED_NODE } from \"../utils/Constants\";\nimport { resolveTournament } from \"../utils/ResultResolver\";\n\ninterface Props {\n  atCoderUserIds: string[];\n  ratingMap?: Map<string, number>;\n  contestResults?: Map<string, number>[];\n}\n\nexport const TournamentBoard = (props: Props) => {\n  const { atCoderUserIds, contestResults, ratingMap } = props;\n\n  const pickWinner = (index: number, children: string[]) => {\n    if (!contestResults || contestResults.length <= index) {\n      return UNDEFINED_NODE;\n    }\n    const ranks = children.map((child) => {\n      const resultMap = contestResults[index];\n      const nextRank = resultMap.size + 1;\n      return contestResults[index].get(child) ?? nextRank;\n    });\n    const ratings = children.map((child) => {\n      return ratingMap?.get(child) ?? 0;\n    });\n    const userInfo = children.map((userId, i) => ({\n      userId,\n      rating: ratings[i],\n      rank: ranks[i],\n    }));\n    const sorted = userInfo.sort((a, b) => {\n      if (a.rank === b.rank) {\n        return b.rating - a.rating;\n      }\n      return a.rank - b.rank;\n    });\n    return sorted[0].userId;\n  };\n\n  const root =\n    atCoderUserIds.length > 0\n      ? makeTree(atCoderUserIds)\n      : { name: \"loading\", children: [] };\n  const resolvedRoot = resolveTournament(root, pickWinner);\n\n  return (\n    <>\n      <TournamentBracket\n        root={resolvedRoot}\n        getRating={(userId) => ratingMap?.get(userId)}\n      />\n    </>\n  );\n};\n","import { UNDEFINED_NODE } from \"../../utils/Constants\";\nimport { BracketNode } from \"./index\";\n\nexport const makeTree = (players: string[]): BracketNode => {\n  let leafCount = 1;\n  while (leafCount * 2 <= players.length) {\n    leafCount *= 2;\n  }\n\n  let leafPlayers = [] as BracketNode[];\n  for (let i = 0; i < leafCount; i++) {\n    if (leafCount + i < players.length) {\n      const player1 = players[i];\n      const player2 = players[leafCount + i];\n      leafPlayers.push({\n        name: UNDEFINED_NODE,\n        children: [\n          { name: player2, children: [] },\n          { name: player1, children: [] },\n        ],\n      });\n    } else {\n      leafPlayers.push({\n        name: players[i],\n        children: [],\n      });\n    }\n  }\n\n  let currentPlayers = leafPlayers;\n\n  while (currentPlayers.length > 1) {\n    const nextPlayers = [];\n    for (let i = 0; i < currentPlayers.length; i += 2) {\n      const node1 = currentPlayers[i];\n      if (i + 1 === currentPlayers.length) {\n        nextPlayers.push({ name: UNDEFINED_NODE, children: [node1] });\n      } else {\n        const node2 = currentPlayers[i + 1];\n        nextPlayers.push({ name: UNDEFINED_NODE, children: [node1, node2] });\n      }\n    }\n    currentPlayers = nextPlayers;\n  }\n\n  return currentPlayers[0];\n};\n","export const SEASON_ID = 1;\nexport const DEADLINE = 1598695200;\n\nexport const UNDEFINED_NODE = \"...\";\nexport const MAXIMUM_MEMBER = 128;\n","async function fetchFixedUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `./users-${seasonId}.json`\n  ).then((response) => response.json());\n  return userIds;\n}\n\nasync function fetchUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `https://atcoder-tournament.herokuapp.com/api/users?season_id=${seasonId}`\n  ).then((response) => response.json());\n  return userIds;\n}\n\nexport async function fetchRatingMap() {\n  const allUsers: { user_id: string; rating: number }[] = await fetch(\n    \"./ratings.json\"\n  ).then((response) => response.json());\n  const userMap = new Map<string, number>();\n  allUsers.forEach((user) => {\n    userMap.set(user.user_id, user.rating);\n  });\n  return userMap;\n}\n\nexport async function fetchOrderedUserList(seasonId: string) {\n  const [userMap, registeredUsers] = await Promise.all([\n    fetchRatingMap(),\n    fetchFixedUserList(seasonId),\n  ]);\n\n  const validUsers = [] as { rating: number; userId: string }[];\n  registeredUsers.forEach((userId) => {\n    const rating = userMap.get(userId);\n    if (rating) {\n      validUsers.push({ rating, userId });\n    }\n  });\n  validUsers.sort((a, b) => {\n    if (a.rating === b.rating) {\n      return a.userId.localeCompare(b.userId);\n    } else {\n      return b.rating - a.rating;\n    }\n  });\n  return validUsers.map((user) => user.userId);\n}\n\nasync function fetchSingleContestMap(contestId: string) {\n  const contestResult = await fetch(`./${contestId}.json`).then((response) =>\n    response.json()\n  );\n  const results: {\n    Rank: number;\n    UserScreenName: string;\n    TotalResult: { Score: number };\n  }[] = contestResult.StandingsData;\n  const map = new Map<string, number>();\n  results.forEach((result) => {\n    if (result.TotalResult.Score > 0) {\n      map.set(result.UserScreenName, result.Rank);\n    }\n  });\n  return map;\n}\n\nexport async function fetchContestResults() {\n  return Promise.all([\n    // fetchSingleContestMap(\"abc174\"),\n    // fetchSingleContestMap(\"abc175\"),\n    // fetchSingleContestMap(\"abc176\"),\n  ]);\n}\n","import {\n  Container,\n  CssBaseline,\n  Grid,\n  Tab,\n  Tabs,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { TournamentBoard } from \"../components/TournamentBoard\";\nimport {\n  fetchContestResults,\n  fetchOrderedUserList,\n  fetchRatingMap,\n} from \"../utils/API\";\nimport \"./tournament.scss\";\nimport { MAXIMUM_MEMBER } from \"../utils/Constants\";\n\nconst formatClass = (index: number) => {\n  if (index === 0) {\n    return \"A\";\n  }\n  if (index < 3) {\n    return `B${index}`;\n  }\n  if (index < 7) {\n    return `C${index - 2}`;\n  }\n  return `D${index - 6}`;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    padding: theme.spacing(8, 0, 6),\n  },\n}));\n\ninterface Props {\n  seasonId: string;\n}\n\nexport const Tournament = (props: Props) => {\n  const classes = useStyles();\n  const [atCoderUserIds, setAtCoderUserIds] = useState<string[]>([]);\n  const [ratingMap, setRatingMap] = useState<Map<string, number> | undefined>(\n    undefined\n  );\n  const [contestResults, setContestResults] = useState<\n    Map<string, number>[] | undefined\n  >(undefined);\n  const [selectedDivision, setSelectedDivision] = useState(0);\n\n  useEffect(() => {\n    fetchOrderedUserList(props.seasonId).then((users) =>\n      setAtCoderUserIds(users)\n    );\n  }, [props.seasonId]);\n  useEffect(() => {\n    if (!ratingMap) {\n      fetchRatingMap().then((map) => setRatingMap(map));\n    }\n    if (!contestResults) {\n      fetchContestResults().then((maps) => setContestResults(maps));\n    }\n  });\n\n  const divisionCount = Math.ceil(atCoderUserIds.length / MAXIMUM_MEMBER);\n  const divisionMembers = Math.ceil(\n    atCoderUserIds.length / Math.max(divisionCount, 1)\n  );\n\n  const divisions = [] as string[][];\n  let i = atCoderUserIds.length - 1;\n  while (i >= 0) {\n    const division = [] as string[];\n    while (i >= 0 && division.length < divisionMembers) {\n      division.push(atCoderUserIds[i]);\n      i -= 1;\n    }\n    divisions.push(division.reverse());\n  }\n  divisions.reverse();\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"lg\" className={classes.heroContent}>\n        <Grid container justify=\"center\" direction=\"column\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            AtCoder Beginner Contest Tournament\n          </Typography>\n          <Typography\n            component=\"h4\"\n            variant=\"h4\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            シーズン 1\n          </Typography>\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            {`参加人数: ${atCoderUserIds.length}`}\n          </Typography>\n          <Tabs\n            value={selectedDivision}\n            onChange={(e, v) => setSelectedDivision(v)}\n            centered\n          >\n            {divisions.map((d, i) => (\n              <Tab label={`CLASS ${formatClass(i)}`} key={i} />\n            ))}\n          </Tabs>\n        </Grid>\n      </Container>\n      <TournamentBoard\n        atCoderUserIds={divisions[selectedDivision] ?? []}\n        ratingMap={ratingMap}\n        contestResults={contestResults}\n      />\n    </>\n  );\n};\n","import {\n  AppBar,\n  Container,\n  createMuiTheme,\n  CssBaseline,\n  Link,\n  MuiThemeProvider,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {\n  HashRouter,\n  Link as RouterLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { RulePage } from \"./pages/RulePage\";\nimport { SubmitPage } from \"./pages/SubmitPage\";\nimport { Tournament } from \"./pages/Tournament\";\nimport { DEADLINE, SEASON_ID } from \"./utils/Constants\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: \"wrap\",\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n    textDecoration: \"none\",\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n  heroContent: {\n    padding: theme.spacing(8, 0, 6),\n  },\n  cardHeader: {\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[700],\n  },\n  cardPricing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    borderTop: `1px solid ${theme.palette.divider}`,\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n}));\nconst App = () => {\n  const classes = useStyles();\n  const now = Date.now() / 1000;\n  return (\n    <HashRouter>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar\n          position=\"static\"\n          color=\"default\"\n          elevation={0}\n          className={classes.appBar}\n        >\n          <Toolbar className={classes.toolbar}>\n            <Typography\n              component={RouterLink}\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              className={classes.toolbarTitle}\n              to=\"/\"\n            >\n              ABC トーナメント\n            </Typography>\n            <nav>\n              {now < DEADLINE && (\n                <Link\n                  component={RouterLink}\n                  variant=\"button\"\n                  color=\"textPrimary\"\n                  to=\"/submit\"\n                  className={classes.link}\n                >\n                  登録\n                </Link>\n              )}\n              <Link\n                component={RouterLink}\n                variant=\"button\"\n                color=\"textPrimary\"\n                to=\"/rule\"\n                className={classes.link}\n              >\n                ルール\n              </Link>\n            </nav>\n          </Toolbar>\n        </AppBar>\n        <Container component=\"main\" maxWidth=\"lg\">\n          <Switch>\n            <Route\n              exact\n              path=\"/tournament/:id([0-9]+)\"\n              render={({ match }) => {\n                const seasonId: string | undefined = match.params.id;\n                return (\n                  <Tournament seasonId={seasonId ?? SEASON_ID.toString()} />\n                );\n              }}\n            />\n            {/*<Route path=\"/submit\">*/}\n            {/*  <SubmitPage />*/}\n            {/*</Route>*/}\n            <Route path=\"/rule\">\n              <RulePage />\n            </Route>\n            <Redirect path=\"/\" to={`/tournament/${SEASON_ID}`} />\n          </Switch>\n        </Container>\n      </MuiThemeProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}