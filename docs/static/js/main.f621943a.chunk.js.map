{"version":3,"sources":["utils/API.ts","pages/RulePage.tsx","components/TournamentBracket/GameNode.tsx","utils/ResultResolver.ts","components/TournamentBoard.tsx","components/TournamentBracket/TreeMaker.ts","utils/Constants.ts","pages/Tournament.tsx","App.tsx","index.tsx"],"names":["RATING_MAP_CACHE","RulePage","Container","maxWidth","CssBaseline","Typography","component","variant","align","color","gutterBottom","Link","href","useStyle","makeStyles","red","orange","yellow","blue","lightBlue","green","brown","grey","nodeText","padding","margin","backgroundColor","textShadow","fontSize","fontFamily","borderWidth","borderRadius","minWidth","textAlign","rankBadge","marginLeft","RatingName","props","c","classes","userId","children","rating","screenUserId","length","slice","className","RankedRatingName","node","type","name","Box","display","justifyContent","alignItems","rank","GameNode","map","child","i","key","resolveTournament","root","putContestResult","resolveByDfs","depth","maxDepth","index","resolvedUserNode","finishedChildren","forEach","push","winner","sort","a","b","getDepth","Math","max","TournamentBoard","nodes","contestResults","players","leafCount","leafPlayers","player1","player2","currentPlayers","nextPlayers","node1","node2","makeTree","resolvedRoot","get","fetchFixedUserList","seasonId","fetch","then","response","json","userIds","fetchRatingMap","allUsers","userMap","Map","user","set","user_id","loadRatingMap","Promise","all","registeredUsers","validUsers","localeCompare","CONTEST_MAP_CACHE","fetchSingleContestMap","contestId","loadingContestId","contestResult","results","StandingsData","result","TotalResult","Score","UserScreenName","Rank","promise","loadSingleContestMap","Tournament","useState","atCoderUserIds","setAtCoderUserIds","undefined","setContestResults","selectedDivision","setSelectedDivision","useEffect","fetchOrderedUserList","users","fetchContestResults","maps","divisionCount","ceil","divisionMembers","divisions","division","reverse","Grid","container","justify","direction","Tabs","value","onChange","e","v","centered","d","Tab","label","theme","createMuiTheme","palette","useStyles","appBar","borderBottom","divider","toolbar","flexWrap","toolbarTitle","flexGrow","textDecoration","link","spacing","heroContent","cardHeader","cardPricing","marginBottom","footer","borderTop","marginTop","paddingTop","paddingBottom","breakpoints","up","App","AppBar","position","elevation","Toolbar","RouterLink","noWrap","to","exact","path","render","match","params","id","toString","ReactDOM","StrictMode","document","getElementById"],"mappings":"wNAiBIA,E,mICdSC,G,MAAW,WACtB,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRC,MAAM,SACNC,MAAM,cACNC,cAAY,GALd,qCASA,kBAACL,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,gBAAgBH,UAAU,KACvD,4BACE,0IACA,uUAIA,2NAIA,+NAIA,+SAGE,4BACE,kJACA,6LACA,+OAKJ,sJAEE,4BACE,+CACS,IACP,kBAACK,EAAA,EAAD,CAAMC,KAAK,sCAAX,iCAIF,+CACS,IACP,kBAACD,EAAA,EAAD,CAAMC,KAAK,sCAAX,iCAIF,+CACS,IACP,kBAACD,EAAA,EAAD,CAAMC,KAAK,sCAAX,iCAIF,wL,kHC/CRC,G,MAAWC,aAAW,iBAAO,CACjCC,IAAK,CACHN,MAAOM,IAAI,MAEbC,OAAQ,CACNP,MAAOO,IAAO,MAEhBC,OAAQ,CACNR,MAAOQ,IAAO,MAEhBC,KAAM,CACJT,MAAOS,IAAK,MAEdC,UAAW,CACTV,MAAOU,IAAU,MAEnBC,MAAO,CACLX,MAAOW,IAAM,MAEfC,MAAO,CACLZ,MAAOY,IAAM,MAEfC,KAAM,CACJb,MAAOa,IAAK,MAGdC,SAAU,CACRC,QAAS,MACTC,OAAQ,EACRC,gBAAiB,UACjBC,WAAY,4BACZC,SAAU,OACVC,WAAY,6BACZC,YAAa,EACbC,aAAc,MACdC,SAAU,QACVC,UAAW,UAEbC,UAAW,CACTC,WAAY,OACZP,SAAU,aAIRQ,EAAa,SAACC,GAIlB,IAMIC,EANEC,EAAU1B,IACV2B,EAASH,EAAMI,SACfC,EAASL,EAAMK,OACrB,IAAKA,EACH,OAAO,2BAAIF,GAIXF,EADEI,EAAS,IACPH,EAAQjB,KACHoB,EAAS,IACdH,EAAQlB,MACHqB,EAAS,KACdH,EAAQnB,MACHsB,EAAS,KACdH,EAAQpB,UACHuB,EAAS,IACdH,EAAQrB,KACHwB,EAAS,KACdH,EAAQtB,OACHyB,EAAS,KACdH,EAAQvB,OAERuB,EAAQxB,IAEd,IAAM4B,EACJH,EAAOI,QAAU,GAAKJ,EAASA,EAAOK,MAAM,EAAG,IAAM,MACvD,OACE,kBAAClC,EAAA,EAAD,CAAMmC,UAAWR,EAAG1B,KAAI,mCAA8B4B,IACnDG,IAKDI,EAAmB,SAACV,GAAkC,IAClDW,EAASX,EAATW,KACFT,EAAU1B,IAChB,OAAQmC,EAAKC,MACX,IAAK,QACH,OACE,yBAAKH,UAAWP,EAAQhB,UACtB,mCAGN,IAAK,cACH,OACE,yBAAKuB,UAAWP,EAAQhB,UACtB,kBAAC,EAAD,CAAYmB,OAAQM,EAAKN,QAASM,EAAKE,OAG7C,IAAK,aACH,OACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,OACRC,eAAe,SACfP,UAAWP,EAAQhB,UAEnB,6BACE,kBAAC,EAAD,CAAYmB,OAAQM,EAAKN,QAASM,EAAKE,OAEzC,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOE,WAAW,SAASR,UAAWP,EAAQL,WAA3D,MAKN,IAAK,mBACH,OACE,kBAACiB,EAAA,EAAD,CACEC,QAAQ,OACRC,eAAe,SACfP,UAAWP,EAAQhB,UAEnB,6BACE,kBAAC,EAAD,CAAYmB,OAAQM,EAAKN,QAASM,EAAKE,OAEzC,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOE,WAAW,SAASR,UAAWP,EAAQL,WACxDc,EAAKO,SAWLC,EAAW,SAAXA,EAAYnB,GACvB,OAAmC,IAA/BA,EAAMW,KAAKP,SAASG,OACf,kBAAC,EAAD,CAAkBI,KAAMX,EAAMW,OAGnC,yBAAKF,UAAU,QACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAkBE,KAAMX,EAAMW,QAEhC,yBAAKF,UAAU,iBACZT,EAAMW,KAAKP,SAASgB,KAAI,SAACC,EAAOC,GAAR,OACvB,yBAAKC,IAAKD,EAAGb,UAAU,cACrB,kBAACU,EAAD,CAAUR,KAAMU,WCrFjBG,EAAoB,SAC/BC,EACAC,GAMA,OAvDmB,SAAfC,EACJhB,EACAiB,EACAC,EACAH,GAKA,IAAMI,EAAQD,EAAWD,EAAQ,EAC3BxB,EAAWO,EAAKP,SAASgB,KAAI,SAACC,GAClC,IAAMU,EAAmBJ,EACvBN,EACAO,EAAQ,EACRC,EACAH,GAEF,MAA8B,gBAA1BK,EAAiBnB,KACZc,EAAiBI,EAAOC,GAExBA,KAILC,EAAmB,GAOzB,GANA5B,EAAS6B,SAAQ,SAACZ,GACG,eAAfA,EAAMT,MAAwC,qBAAfS,EAAMT,MACvCoB,EAAiBE,KAAKb,MAIF,IAApBjB,EAASG,QAAgByB,EAAiBzB,SAAWH,EAASG,OAChE,OAAO,2BACFI,GADL,IAEEP,aAIJ,IAAM+B,EAAoBH,EArDEI,MAAK,SAACC,EAAGC,GACnC,MAAe,eAAXD,EAAEzB,MAAoC,eAAX0B,EAAE1B,KACxB0B,EAAEjC,OAASgC,EAAEhC,OAEP,eAAXgC,EAAEzB,KACG,EAEM,eAAX0B,EAAE1B,MACI,EAEHyB,EAAEnB,KAAOoB,EAAEpB,QAEN,GA0Cd,MAAO,CACLN,KAAM,cACNP,OAAQ8B,EAAO9B,OACfQ,KAAMsB,EAAOtB,KACbT,YAYKuB,CAAaF,EAAM,EA/EX,SAAXc,EAAY5B,EAAmBiB,GACnC,IAAIC,EAAWD,EAIf,OAHAjB,EAAKP,SAAS6B,SAAQ,SAACZ,GACrBQ,EAAWW,KAAKC,IAAIF,EAASlB,EAAOO,EAAQ,GAAIC,MAE3CA,EAyEOU,CAASd,EAAM,GACOC,ICtEzBgB,EAAkB,SAAC1C,GAAkB,IACxC2C,EAA0B3C,EAA1B2C,MAAOC,EAAmB5C,EAAnB4C,eAwBTnB,EACJkB,EAAMpC,OAAS,ECvCK,SAACsC,GAEvB,IADA,IAAIC,EAAY,EACG,EAAZA,GAAiBD,EAAQtC,QAC9BuC,GAAa,EAIf,IADA,IAAIC,EAAc,GACTzB,EAAI,EAAGA,EAAIwB,EAAWxB,IAC7B,GAAIwB,EAAYxB,EAAIuB,EAAQtC,OAAQ,CAClC,IAAMyC,EAAUH,EAAQvB,GAClB2B,EAAUJ,EAAQC,EAAYxB,GACpCyB,EAAYb,KAAK,CACftB,KAAM,QACNR,SAAU,CAAC4C,EAASC,UAGtBF,EAAYb,KAAKW,EAAQvB,IAM7B,IAFA,IAAI4B,EAAiBH,EAEdG,EAAe3C,OAAS,GAAG,CAEhC,IADA,IAAM4C,EAAc,GACX7B,EAAI,EAAGA,EAAI4B,EAAe3C,OAAQe,GAAK,EAAG,CACjD,IAAM8B,EAAQF,EAAe5B,GAC7B,GAAIA,EAAI,IAAM4B,EAAe3C,OAC3B4C,EAAYjB,KAAK,CAAEtB,KAAM,QAASR,SAAU,CAACgD,SACxC,CACL,IAAMC,EAAQH,EAAe5B,EAAI,GACjC6B,EAAYjB,KAAK,CAAEtB,KAAM,QAASR,SAAU,CAACgD,EAAOC,MAGxDH,EAAiBC,EAGnB,OAAOD,EAAe,GDGDI,CAASX,GAAS,CAAE/B,KAAM,QAASR,SAAU,IAC5DmD,EAAe/B,EAAkBC,GAxBd,SACvBK,EACAnB,GAEA,IAAKiC,GAAkBA,EAAerC,QAAUuB,EAC9C,OAAOnB,EAET,IAAMO,EAAO0B,EAAed,GAAO0B,IAAI7C,EAAKE,MAC5C,OAAIK,EACK,2BACFP,GADL,IAEEC,KAAM,mBACNM,KAAMA,IAGD,2BACFP,GADL,IAEEC,KAAM,kBASZ,OAAO,kBAAC,EAAD,CAAUD,KAAM4C,K,kCJ1CVE,E,8EAAf,WAAkCC,GAAlC,eAAArB,EAAA,sEACkCsB,MAAM,WAAD,OACxBD,EADwB,UAEnCE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAHhC,cACQC,EADR,yBAISA,GAJT,4C,sBAgBO,SAASC,IAAiB,4CAC/B,8BAAA3B,EAAA,sEACgEsB,MAC5D,kBACAC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAHhC,cACQG,EADR,OAIQC,EAAU,IAAIC,IACpBF,EAAShC,SAAQ,SAACmC,GAChBF,EAAQG,IAAID,EAAKE,QAASF,EAAK/D,WANnC,kBAQS6D,GART,4CAD+B,sBAc/B,OAHKvG,IACHA,EAZ8B,WAAD,+BAYV4G,IAEd5G,E,4CAGF,WAAoC+F,GAApC,uBAAArB,EAAA,sEACoCmC,QAAQC,IAAI,CACnDT,IACAP,EAAmBC,KAHhB,0CACEQ,EADF,KACWQ,EADX,KAMCC,EAAa,GACnBD,EAAgBzC,SAAQ,SAAC9B,GACvB,IAAME,EAAS6D,EAAQV,IAAIrD,GACvBE,GACFsE,EAAWzC,KAAK,CACdtB,KAAM,cACNP,SACAQ,KAAMV,EACNC,SAAU,QAIhBuE,EAAWvC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAEhC,SAAWiC,EAAEjC,OACVgC,EAAExB,KAAK+D,cAActC,EAAEzB,MAEvByB,EAAEjC,OAASgC,EAAEhC,UAtBnB,kBAyBEsE,GAzBF,6C,sBA4BP,IAAME,EAAoB,IAAIV,IAC9B,SAASW,EAAsBC,GAAmB,4CAChD,WAAoCC,GAApC,mBAAA3C,EAAA,sEAC8BsB,MAAM,KAAD,OAC1BqB,EAD0B,UAE/BpB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAHhC,cACQmB,EADR,OAIQC,EAIAD,EAAcE,cACd/D,EAAM,IAAI+C,IAChBe,EAAQjD,SAAQ,SAACmD,GACXA,EAAOC,YAAYC,MAAQ,GAC7BlE,EAAIiD,IAAIe,EAAOG,eAAgBH,EAAOI,SAZ5C,kBAeSpE,GAfT,4CADgD,sBAmBhD,IAAMA,EAAMyD,EAAkBrB,IAAIuB,GAClC,IAAK3D,EAAK,CACR,IAAMqE,EArByC,SAAD,kCAqB9BC,CAAqBX,GAErC,OADAF,EAAkBR,IAAIU,EAAWU,GAC1BA,EAGT,OAAOrE,E,4CAGF,sBAAAiB,EAAA,+EACEmC,QAAQC,IAAI,CACjBK,EAAsB,UACtBA,EAAsB,aAHnB,4C,sBM7FA,IC+BMa,EAAa,SAAC3F,GAAkB,IAAD,IACE4F,mBAAwB,IAD1B,mBACnCC,EADmC,KACnBC,EADmB,OAEEF,wBAE1CG,GAJwC,mBAEnCnD,EAFmC,KAEnBoD,EAFmB,OAKMJ,mBAAS,GALf,mBAKnCK,EALmC,KAKjBC,EALiB,KAO1CC,qBAAU,YPHL,SAAP,mCOIIC,CAAqBpG,EAAM0D,UAAUE,MAAK,SAACyC,GAAD,OACxCP,EAAkBO,QAEnB,CAACrG,EAAM0D,WACVyC,qBAAU,WACHvD,GPiDF,WAAP,+BOhDM0D,GAAsB1C,MAAK,SAAC2C,GAAD,OAAUP,EAAkBO,SAW3D,IAPA,IAAMC,EAAgBhE,KAAKiE,KAAKZ,EAAetF,OD/CnB,KCgDtBmG,EAAkBlE,KAAKiE,KAC3BZ,EAAetF,OAASiC,KAAKC,IAAI+D,EAAe,IAG5CG,EAAY,GACdrF,EAAIuE,EAAetF,OAAS,EACzBe,GAAK,GAAG,CAEb,IADA,IAAMsF,EAAW,GACVtF,GAAK,GAAKsF,EAASrG,OAASmG,GACjCE,EAAS1E,KAAK2D,EAAevE,IAC7BA,GAAK,EAEPqF,EAAUzE,KAAK0E,EAASC,WAI1B,OAFAF,EAAUE,UAGR,oCACE,kBAAC9I,EAAA,EAAD,MACA,kBAAC+I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,UAAU,UACzC,kBAACjJ,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRC,MAAM,SACNC,MAAM,cACNC,cAAY,GALd,uCASA,kBAACL,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRC,MAAM,SACNC,MAAM,cACNC,cAAY,GALd,8BASA,kBAACL,EAAA,EAAD,CACEC,UAAU,MACVC,QAAQ,QACRC,MAAM,SACNC,MAAM,cACNC,cAAY,GALd,oCAOYwH,EAAetF,SAE3B,kBAAC2G,EAAA,EAAD,CACEC,MAAOlB,EACPmB,SAAU,SAACC,EAAGC,GAAJ,OAAUpB,EAAoBoB,IACxCC,UAAQ,GAEPZ,EAAUvF,KAAI,SAACoG,EAAGlG,GAAJ,OACb,kBAACmG,EAAA,EAAD,CAAKC,MAAK,iBAzFD5F,EAyFwBR,EAxF7B,IAAVQ,EACK,IAELA,EAAQ,EACJ,IAAN,OAAWA,GAETA,EAAQ,EACJ,IAAN,OAAWA,EAAQ,GAEf,IAAN,OAAWA,EAAQ,KA+E8BP,IAAKD,IAzFpC,IAACQ,MA6Fb,kBAAChB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,UACjC,kBAAC,EAAD,CACE2B,MAAK,UAAEgE,EAAUV,UAAZ,QAAiC,GACtCrD,eAAgBA,QCtFtB+E,EAAQC,YAAe,CAC3BC,QAAS,CACPjH,KAAM,UAIJkH,EAAYrJ,aAAW,SAACkJ,GAAD,MAAY,CACvCI,OAAQ,CACNC,aAAa,aAAD,OAAeL,EAAME,QAAQI,UAE3CC,QAAS,CACPC,SAAU,QAEZC,aAAc,CACZC,SAAU,EACVC,eAAgB,QAElBC,KAAM,CACJnJ,OAAQuI,EAAMa,QAAQ,EAAG,MAE3BC,YAAa,CACXtJ,QAASwI,EAAMa,QAAQ,EAAG,EAAG,IAE/BE,WAAY,CACVrJ,gBACyB,UAAvBsI,EAAME,QAAQjH,KACV+G,EAAME,QAAQ5I,KAAK,KACnB0I,EAAME,QAAQ5I,KAAK,MAE3B0J,YAAa,CACX5H,QAAS,OACTC,eAAgB,SAChBC,WAAY,WACZ2H,aAAcjB,EAAMa,QAAQ,IAE9BK,OAAO,aACLC,UAAU,aAAD,OAAenB,EAAME,QAAQI,SACtCc,UAAWpB,EAAMa,QAAQ,GACzBQ,WAAYrB,EAAMa,QAAQ,GAC1BS,cAAetB,EAAMa,QAAQ,IAC5Bb,EAAMuB,YAAYC,GAAG,MAAQ,CAC5BH,WAAYrB,EAAMa,QAAQ,GAC1BS,cAAetB,EAAMa,QAAQ,SA2EpBY,GAvEH,WACV,IAAMlJ,EAAU4H,IAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAkBH,MAAOA,GACvB,kBAAC5J,EAAA,EAAD,MACA,kBAACsL,EAAA,EAAD,CACEC,SAAS,SACTlL,MAAM,UACNmL,UAAW,EACX9I,UAAWP,EAAQ6H,QAEnB,kBAACyB,EAAA,EAAD,CAAS/I,UAAWP,EAAQgI,SAC1B,kBAAClK,EAAA,EAAD,CACEC,UAAWwL,IACXvL,QAAQ,KACRE,MAAM,UACNsL,QAAM,EACNjJ,UAAWP,EAAQkI,aACnBuB,GAAG,KANL,4CAUA,6BAUE,kBAACrL,EAAA,EAAD,CACEL,UAAWwL,IACXvL,QAAQ,SACRE,MAAM,cACNuL,GAAG,QACHlJ,UAAWP,EAAQqI,MALrB,yBAYN,kBAAC1K,EAAA,EAAD,CAAWI,UAAU,OAAOH,UAAU,GACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8L,OAAK,EACLC,KAAK,0BACLC,OAAQ,YAAgB,IAChBpG,EADe,EAAZqG,MACkCC,OAAOC,GAClD,OACE,kBAAC,EAAD,CAAYvG,SAAQ,OAAEA,QAAF,IAAEA,IF3Hf,GE2HqCwG,gBAOlD,kBAAC,IAAD,CAAOL,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUA,KAAK,IAAIF,GAAE,sBFrIR,UGIzBQ,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f621943a.chunk.js","sourcesContent":["import { WaitingUserNode } from \"../models/BracketNode\";\n\nasync function fetchFixedUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `./users-${seasonId}.json`\n  ).then((response) => response.json());\n  return userIds;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nasync function fetchUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `https://atcoder-tournament.herokuapp.com/api/users?season_id=${seasonId}`\n  ).then((response) => response.json());\n  return userIds;\n}\n\nlet RATING_MAP_CACHE: Promise<Map<string, number>> | undefined;\nexport function fetchRatingMap() {\n  async function loadRatingMap() {\n    const allUsers: { user_id: string; rating: number }[] = await fetch(\n      \"./ratings.json\"\n    ).then((response) => response.json());\n    const userMap = new Map<string, number>();\n    allUsers.forEach((user) => {\n      userMap.set(user.user_id, user.rating);\n    });\n    return userMap;\n  }\n  if (!RATING_MAP_CACHE) {\n    RATING_MAP_CACHE = loadRatingMap();\n  }\n  return RATING_MAP_CACHE;\n}\n\nexport async function fetchOrderedUserList(seasonId: string) {\n  const [userMap, registeredUsers] = await Promise.all([\n    fetchRatingMap(),\n    fetchFixedUserList(seasonId),\n  ]);\n\n  const validUsers = [] as WaitingUserNode[];\n  registeredUsers.forEach((userId) => {\n    const rating = userMap.get(userId);\n    if (rating) {\n      validUsers.push({\n        type: \"WaitingUser\",\n        rating,\n        name: userId,\n        children: [],\n      });\n    }\n  });\n  validUsers.sort((a, b) => {\n    if (a.rating === b.rating) {\n      return a.name.localeCompare(b.name);\n    } else {\n      return b.rating - a.rating;\n    }\n  });\n  return validUsers;\n}\n\nconst CONTEST_MAP_CACHE = new Map<string, Promise<Map<string, number>>>();\nfunction fetchSingleContestMap(contestId: string) {\n  async function loadSingleContestMap(loadingContestId: string) {\n    const contestResult = await fetch(\n      `./${loadingContestId}.json`\n    ).then((response) => response.json());\n    const results: {\n      Rank: number;\n      UserScreenName: string;\n      TotalResult: { Score: number };\n    }[] = contestResult.StandingsData;\n    const map = new Map<string, number>();\n    results.forEach((result) => {\n      if (result.TotalResult.Score > 0) {\n        map.set(result.UserScreenName, result.Rank);\n      }\n    });\n    return map;\n  }\n\n  const map = CONTEST_MAP_CACHE.get(contestId);\n  if (!map) {\n    const promise = loadSingleContestMap(contestId);\n    CONTEST_MAP_CACHE.set(contestId, promise);\n    return promise;\n  }\n\n  return map;\n}\n\nexport async function fetchContestResults() {\n  return Promise.all([\n    fetchSingleContestMap(\"abc177\"),\n    fetchSingleContestMap(\"abc178\"),\n    // fetchSingleContestMap(\"abc176\"),\n  ]);\n}\n","import { Container, CssBaseline, Link, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const RulePage = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <CssBaseline />\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        align=\"center\"\n        color=\"textPrimary\"\n        gutterBottom\n      >\n        ABC Tournament ルール\n      </Typography>\n      <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n        <ul>\n          <li>ABC の結果を使ったトーナメント戦です。</li>\n          <li>\n            各試合は 1 対 1 で行われ、AtCoder の ABC\n            級のコンテストでの順位が高かった方が勝者となり、次の試合に進出します。\n          </li>\n          <li>\n            ABC級のコンテストとはレーティング更新対象が 0 - 1999\n            のコンテストです。\n          </li>\n          <li>\n            同順位の場合は2020年8月29日 19:00\n            JST時点でのレートが高い方を勝者とします。\n          </li>\n          <li>\n            コンテストにおいて以下に該当するユーザーは\n            (コンテストで正の点数を取った人数 + 1) 位となります。\n            <ul>\n              <li>コンテストに参加登録していないユーザー</li>\n              <li>コンテストに参加登録したが1回も提出していないユーザー</li>\n              <li>\n                コンテストに参加登録し、1回以上提出したが点数が得られなかったユーザー\n              </li>\n            </ul>\n          </li>\n          <li>\n            各試合の対象となる ABC は以下のとおりです。\n            <ul>\n              <li>\n                1 回戦 -{\" \"}\n                <Link href=\"https://atcoder.jp/contests/abc177\">\n                  AtCoder Beginner Contest 177\n                </Link>\n              </li>\n              <li>\n                2 回戦 -{\" \"}\n                <Link href=\"https://atcoder.jp/contests/abc178\">\n                  AtCoder Beginner Contest 178\n                </Link>\n              </li>\n              <li>\n                3 回戦 -{\" \"}\n                <Link href=\"https://atcoder.jp/contests/abc179\">\n                  AtCoder Beginner Contest 179\n                </Link>\n              </li>\n              <li>4 回戦以降 - AtCoder からアナウンスがあり次第更新します。</li>\n            </ul>\n          </li>\n        </ul>\n      </Typography>\n    </Container>\n  );\n};\n","import { Box, Link } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { BracketNode } from \"../../models/BracketNode\";\nimport {\n  red,\n  orange,\n  yellow,\n  blue,\n  lightBlue,\n  green,\n  brown,\n  grey,\n} from \"@material-ui/core/colors\";\nimport \"./tournament.scss\";\n\nconst useStyle = makeStyles(() => ({\n  red: {\n    color: red[500],\n  },\n  orange: {\n    color: orange[500],\n  },\n  yellow: {\n    color: yellow[500],\n  },\n  blue: {\n    color: blue[800],\n  },\n  lightBlue: {\n    color: lightBlue[300],\n  },\n  green: {\n    color: green[400],\n  },\n  brown: {\n    color: brown[400],\n  },\n  grey: {\n    color: grey[500],\n  },\n\n  nodeText: {\n    padding: \"3px\",\n    margin: 0,\n    backgroundColor: \"#7a7b7d\",\n    textShadow: \"rgb(34,34,34) 1px 1px 1px\",\n    fontSize: \"14px\",\n    fontFamily: '\"Roboto Light\", sans-serif',\n    borderWidth: 0,\n    borderRadius: \"3px\",\n    minWidth: \"120px\",\n    textAlign: \"center\",\n  },\n  rankBadge: {\n    marginLeft: \"auto\",\n    fontSize: \"10px\",\n  },\n}));\n\nconst RatingName = (props: {\n  children: string;\n  rating: number | undefined;\n}) => {\n  const classes = useStyle();\n  const userId = props.children;\n  const rating = props.rating;\n  if (!rating) {\n    return <p>{userId}</p>;\n  }\n  let c: string;\n  if (rating < 400) {\n    c = classes.grey;\n  } else if (rating < 800) {\n    c = classes.brown;\n  } else if (rating < 1200) {\n    c = classes.green;\n  } else if (rating < 1600) {\n    c = classes.lightBlue;\n  } else if (rating < 2000) {\n    c = classes.blue;\n  } else if (rating < 2400) {\n    c = classes.yellow;\n  } else if (rating < 2800) {\n    c = classes.orange;\n  } else {\n    c = classes.red;\n  }\n  const screenUserId =\n    userId.length <= 13 ? userId : userId.slice(0, 10) + \"...\";\n  return (\n    <Link className={c} href={`https://atcoder.jp/users/${userId}`}>\n      {screenUserId}\n    </Link>\n  );\n};\n\nconst RankedRatingName = (props: { node: BracketNode }) => {\n  const { node } = props;\n  const classes = useStyle();\n  switch (node.type) {\n    case \"Empty\":\n      return (\n        <div className={classes.nodeText}>\n          <p>...</p>\n        </div>\n      );\n    case \"WaitingUser\":\n      return (\n        <div className={classes.nodeText}>\n          <RatingName rating={node.rating}>{node.name}</RatingName>\n        </div>\n      );\n    case \"AbsentUser\":\n      return (\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          className={classes.nodeText}\n        >\n          <div>\n            <RatingName rating={node.rating}>{node.name}</RatingName>\n          </div>\n          <Box display=\"flex\" alignItems=\"center\" className={classes.rankBadge}>\n            -\n          </Box>\n        </Box>\n      );\n    case \"ParticipatedUser\":\n      return (\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          className={classes.nodeText}\n        >\n          <div>\n            <RatingName rating={node.rating}>{node.name}</RatingName>\n          </div>\n          <Box display=\"flex\" alignItems=\"center\" className={classes.rankBadge}>\n            {node.rank}\n          </Box>\n        </Box>\n      );\n  }\n};\n\ninterface Props {\n  node: BracketNode;\n}\n\nexport const GameNode = (props: Props) => {\n  if (props.node.children.length === 0) {\n    return <RankedRatingName node={props.node} />;\n  } else {\n    return (\n      <div className=\"item\">\n        <div className=\"item-parent\">\n          <RankedRatingName node={props.node} />\n        </div>\n        <div className=\"item-children\">\n          {props.node.children.map((child, i) => (\n            <div key={i} className=\"item-child\">\n              <GameNode node={child} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n","import {\n  BracketNode,\n  FinishedUserNode,\n  WaitingUserNode,\n} from \"../models/BracketNode\";\n\nconst getDepth = (node: BracketNode, depth: number) => {\n  let maxDepth = depth;\n  node.children.forEach((child) => {\n    maxDepth = Math.max(getDepth(child, depth + 1), maxDepth);\n  });\n  return maxDepth;\n};\n\nconst pickWinner = (userInfoList: FinishedUserNode[]) => {\n  const sorted = userInfoList.sort((a, b) => {\n    if (a.type === \"AbsentUser\" && b.type === \"AbsentUser\") {\n      return b.rating - a.rating;\n    }\n    if (a.type === \"AbsentUser\") {\n      return 1;\n    }\n    if (b.type === \"AbsentUser\") {\n      return -1;\n    }\n    return a.rank - b.rank;\n  });\n  return sorted[0];\n};\n\nconst resolveByDfs = (\n  node: BracketNode,\n  depth: number,\n  maxDepth: number,\n  putContestResult: (\n    index: number,\n    node: WaitingUserNode\n  ) => WaitingUserNode | FinishedUserNode\n): BracketNode => {\n  const index = maxDepth - depth - 1;\n  const children = node.children.map((child) => {\n    const resolvedUserNode = resolveByDfs(\n      child,\n      depth + 1,\n      maxDepth,\n      putContestResult\n    );\n    if (resolvedUserNode.type === \"WaitingUser\") {\n      return putContestResult(index, resolvedUserNode);\n    } else {\n      return resolvedUserNode;\n    }\n  });\n\n  const finishedChildren = [] as FinishedUserNode[];\n  children.forEach((child) => {\n    if (child.type === \"AbsentUser\" || child.type === \"ParticipatedUser\") {\n      finishedChildren.push(child);\n    }\n  });\n\n  if (children.length === 0 || finishedChildren.length !== children.length) {\n    return {\n      ...node,\n      children,\n    };\n  }\n\n  const winner = pickWinner(finishedChildren);\n  return {\n    type: \"WaitingUser\",\n    rating: winner.rating,\n    name: winner.name,\n    children,\n  };\n};\n\nexport const resolveTournament = (\n  root: BracketNode,\n  putContestResult: (\n    index: number,\n    node: WaitingUserNode\n  ) => WaitingUserNode | FinishedUserNode\n) => {\n  const depth = getDepth(root, 0);\n  return resolveByDfs(root, 0, depth, putContestResult);\n};\n","import React from \"react\";\nimport {\n  BracketNode,\n  FinishedUserNode,\n  WaitingUserNode,\n} from \"../models/BracketNode\";\nimport { GameNode } from \"./TournamentBracket/GameNode\";\nimport { makeTree } from \"./TournamentBracket/TreeMaker\";\nimport { resolveTournament } from \"../utils/ResultResolver\";\n\ninterface Props {\n  nodes: BracketNode[];\n  contestResults?: Map<string, number>[];\n}\n\nexport const TournamentBoard = (props: Props) => {\n  const { nodes, contestResults } = props;\n\n  const putContestResult = (\n    index: number,\n    node: WaitingUserNode\n  ): WaitingUserNode | FinishedUserNode => {\n    if (!contestResults || contestResults.length <= index) {\n      return node;\n    }\n    const rank = contestResults[index].get(node.name);\n    if (rank) {\n      return {\n        ...node,\n        type: \"ParticipatedUser\",\n        rank: rank,\n      };\n    } else {\n      return {\n        ...node,\n        type: \"AbsentUser\",\n      };\n    }\n  };\n\n  const root: BracketNode =\n    nodes.length > 0 ? makeTree(nodes) : { type: \"Empty\", children: [] };\n  const resolvedRoot = resolveTournament(root, putContestResult);\n\n  return <GameNode node={resolvedRoot} />;\n};\n","import { BracketNode } from \"../../models/BracketNode\";\n\nexport const makeTree = (players: BracketNode[]): BracketNode => {\n  let leafCount = 1;\n  while (leafCount * 2 <= players.length) {\n    leafCount *= 2;\n  }\n\n  let leafPlayers = [] as BracketNode[];\n  for (let i = 0; i < leafCount; i++) {\n    if (leafCount + i < players.length) {\n      const player1 = players[i];\n      const player2 = players[leafCount + i];\n      leafPlayers.push({\n        type: \"Empty\",\n        children: [player1, player2],\n      });\n    } else {\n      leafPlayers.push(players[i]);\n    }\n  }\n\n  let currentPlayers = leafPlayers;\n\n  while (currentPlayers.length > 1) {\n    const nextPlayers = [] as BracketNode[];\n    for (let i = 0; i < currentPlayers.length; i += 2) {\n      const node1 = currentPlayers[i];\n      if (i + 1 === currentPlayers.length) {\n        nextPlayers.push({ type: \"Empty\", children: [node1] });\n      } else {\n        const node2 = currentPlayers[i + 1];\n        nextPlayers.push({ type: \"Empty\", children: [node1, node2] });\n      }\n    }\n    currentPlayers = nextPlayers;\n  }\n\n  return currentPlayers[0];\n};\n","export const SEASON_ID = 1;\n\nexport const MAXIMUM_MEMBER = 128;\n","import {\n  Box,\n  CssBaseline,\n  Grid,\n  Tab,\n  Tabs,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { TournamentBoard } from \"../components/TournamentBoard\";\nimport { BracketNode } from \"../models/BracketNode\";\nimport { fetchContestResults, fetchOrderedUserList } from \"../utils/API\";\nimport { MAXIMUM_MEMBER } from \"../utils/Constants\";\n\nconst formatClass = (index: number) => {\n  if (index === 0) {\n    return \"A\";\n  }\n  if (index < 3) {\n    return `B${index}`;\n  }\n  if (index < 7) {\n    return `C${index - 2}`;\n  }\n  return `D${index - 6}`;\n};\n\ninterface Props {\n  seasonId: string;\n}\n\nexport const Tournament = (props: Props) => {\n  const [atCoderUserIds, setAtCoderUserIds] = useState<BracketNode[]>([]);\n  const [contestResults, setContestResults] = useState<\n    Map<string, number>[] | undefined\n  >(undefined);\n  const [selectedDivision, setSelectedDivision] = useState(0);\n\n  useEffect(() => {\n    fetchOrderedUserList(props.seasonId).then((users) =>\n      setAtCoderUserIds(users)\n    );\n  }, [props.seasonId]);\n  useEffect(() => {\n    if (!contestResults) {\n      fetchContestResults().then((maps) => setContestResults(maps));\n    }\n  });\n\n  const divisionCount = Math.ceil(atCoderUserIds.length / MAXIMUM_MEMBER);\n  const divisionMembers = Math.ceil(\n    atCoderUserIds.length / Math.max(divisionCount, 1)\n  );\n\n  const divisions = [] as BracketNode[][];\n  let i = atCoderUserIds.length - 1;\n  while (i >= 0) {\n    const division = [] as BracketNode[];\n    while (i >= 0 && division.length < divisionMembers) {\n      division.push(atCoderUserIds[i]);\n      i -= 1;\n    }\n    divisions.push(division.reverse());\n  }\n  divisions.reverse();\n\n  return (\n    <>\n      <CssBaseline />\n      <Grid container justify=\"center\" direction=\"column\">\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          AtCoder Beginner Contest Tournament\n        </Typography>\n        <Typography\n          component=\"h4\"\n          variant=\"h4\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          シーズン 1\n        </Typography>\n        <Typography\n          component=\"div\"\n          variant=\"body1\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          {`参加人数: ${atCoderUserIds.length}`}\n        </Typography>\n        <Tabs\n          value={selectedDivision}\n          onChange={(e, v) => setSelectedDivision(v)}\n          centered\n        >\n          {divisions.map((d, i) => (\n            <Tab label={`CLASS ${formatClass(i)}`} key={i} />\n          ))}\n        </Tabs>\n\n        <Box display=\"flex\" justifyContent=\"center\">\n          <TournamentBoard\n            nodes={divisions[selectedDivision] ?? []}\n            contestResults={contestResults}\n          />\n        </Box>\n      </Grid>\n    </>\n  );\n};\n","import {\n  AppBar,\n  Container,\n  createMuiTheme,\n  CssBaseline,\n  Link,\n  MuiThemeProvider,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {\n  HashRouter,\n  Link as RouterLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { RulePage } from \"./pages/RulePage\";\nimport { Tournament } from \"./pages/Tournament\";\nimport { SEASON_ID } from \"./utils/Constants\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: \"wrap\",\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n    textDecoration: \"none\",\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n  heroContent: {\n    padding: theme.spacing(8, 0, 6),\n  },\n  cardHeader: {\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[700],\n  },\n  cardPricing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    borderTop: `1px solid ${theme.palette.divider}`,\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n}));\nconst App = () => {\n  const classes = useStyles();\n  return (\n    <HashRouter>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar\n          position=\"static\"\n          color=\"default\"\n          elevation={0}\n          className={classes.appBar}\n        >\n          <Toolbar className={classes.toolbar}>\n            <Typography\n              component={RouterLink}\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              className={classes.toolbarTitle}\n              to=\"/\"\n            >\n              ABC トーナメント\n            </Typography>\n            <nav>\n              {/*<Link*/}\n              {/*    component={RouterLink}*/}\n              {/*    variant=\"button\"*/}\n              {/*    color=\"textPrimary\"*/}\n              {/*    to=\"/submit\"*/}\n              {/*    className={classes.link}*/}\n              {/*>*/}\n              {/*  登録*/}\n              {/*</Link>*/}\n              <Link\n                component={RouterLink}\n                variant=\"button\"\n                color=\"textPrimary\"\n                to=\"/rule\"\n                className={classes.link}\n              >\n                ルール\n              </Link>\n            </nav>\n          </Toolbar>\n        </AppBar>\n        <Container component=\"main\" maxWidth={false}>\n          <Switch>\n            <Route\n              exact\n              path=\"/tournament/:id([0-9]+)\"\n              render={({ match }) => {\n                const seasonId: string | undefined = match.params.id;\n                return (\n                  <Tournament seasonId={seasonId ?? SEASON_ID.toString()} />\n                );\n              }}\n            />\n            {/*<Route path=\"/submit\">*/}\n            {/*  <SubmitPage />*/}\n            {/*</Route>*/}\n            <Route path=\"/rule\">\n              <RulePage />\n            </Route>\n            <Redirect path=\"/\" to={`/tournament/${SEASON_ID}`} />\n          </Switch>\n        </Container>\n      </MuiThemeProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}