{"version":3,"sources":["utils/API.ts","pages/RulePage.tsx","components/TournamentBracket/GameNode.tsx","utils/ResultResolver.ts","components/TournamentBoard.tsx","components/TournamentBracket/TreeMaker.ts","utils/Constants.ts","pages/Tournament.tsx","App.tsx","index.tsx"],"names":["RATING_MAP_CACHE","RulePage","Container","maxWidth","CssBaseline","Typography","component","variant","align","color","gutterBottom","Link","href","useStyle","makeStyles","red","orange","yellow","blue","lightBlue","green","brown","grey","nodeText","padding","margin","backgroundColor","textShadow","fontSize","fontFamily","borderWidth","borderRadius","minWidth","textAlign","rankBadge","marginLeft","RatingName","props","c","classes","userId","children","rating","screenUserId","length","slice","className","RankedRatingName","node","rank","Box","display","justifyContent","name","alignItems","GameNode","getRating","map","i","key","resolveTournament","root","makeUserInfo","resolveByDfs","depth","maxDepth","index","child","userInfoList","forEach","user","userInfo","push","childrenWithResult","sort","a","b","pickWinner","getDepth","Math","max","TournamentBoard","atCoderUserIds","contestResults","ratingMap","players","leafCount","leafPlayers","player1","player2","currentPlayers","nextPlayers","node1","node2","makeTree","resolvedRoot","nextRank","size","get","fetchFixedUserList","seasonId","fetch","then","response","json","userIds","fetchRatingMap","allUsers","userMap","Map","set","user_id","loadRatingMap","Promise","all","registeredUsers","validUsers","localeCompare","CONTEST_MAP_CACHE","fetchSingleContestMap","contestId","loadingContestId","contestResult","results","StandingsData","result","TotalResult","Score","UserScreenName","Rank","promise","loadSingleContestMap","Tournament","useState","setAtCoderUserIds","undefined","setRatingMap","setContestResults","selectedDivision","setSelectedDivision","useEffect","fetchOrderedUserList","users","fetchContestResults","maps","divisionCount","ceil","divisionMembers","divisions","division","reverse","Grid","container","justify","direction","Tabs","value","onChange","e","v","centered","d","Tab","label","theme","createMuiTheme","palette","type","useStyles","appBar","borderBottom","divider","toolbar","flexWrap","toolbarTitle","flexGrow","textDecoration","link","spacing","heroContent","cardHeader","cardPricing","marginBottom","footer","borderTop","marginTop","paddingTop","paddingBottom","breakpoints","up","App","now","Date","AppBar","position","elevation","Toolbar","RouterLink","noWrap","to","exact","path","render","match","params","id","toString","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ad954b.chunk.js","sourcesContent":["async function fetchFixedUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `./users-${seasonId}.json`\n  ).then((response) => response.json());\n  return userIds;\n}\n\nasync function fetchUserList(seasonId: string) {\n  const userIds: string[] = await fetch(\n    `https://atcoder-tournament.herokuapp.com/api/users?season_id=${seasonId}`\n  ).then((response) => response.json());\n  return userIds;\n}\n\nlet RATING_MAP_CACHE: Promise<Map<string, number>> | undefined;\nexport function fetchRatingMap() {\n  async function loadRatingMap() {\n    const allUsers: { user_id: string; rating: number }[] = await fetch(\n      \"./ratings.json\"\n    ).then((response) => response.json());\n    const userMap = new Map<string, number>();\n    allUsers.forEach((user) => {\n      userMap.set(user.user_id, user.rating);\n    });\n    return userMap;\n  }\n  if (!RATING_MAP_CACHE) {\n    RATING_MAP_CACHE = loadRatingMap();\n  }\n  return RATING_MAP_CACHE;\n}\n\nexport async function fetchOrderedUserList(seasonId: string) {\n  const [userMap, registeredUsers] = await Promise.all([\n    fetchRatingMap(),\n    fetchFixedUserList(seasonId),\n  ]);\n\n  const validUsers = [] as { rating: number; userId: string }[];\n  registeredUsers.forEach((userId) => {\n    const rating = userMap.get(userId);\n    if (rating) {\n      validUsers.push({ rating, userId });\n    }\n  });\n  validUsers.sort((a, b) => {\n    if (a.rating === b.rating) {\n      return a.userId.localeCompare(b.userId);\n    } else {\n      return b.rating - a.rating;\n    }\n  });\n  return validUsers.map((user) => user.userId);\n}\n\nconst CONTEST_MAP_CACHE = new Map<string, Promise<Map<string, number>>>();\nfunction fetchSingleContestMap(contestId: string) {\n  async function loadSingleContestMap(loadingContestId: string) {\n    const contestResult = await fetch(\n      `./${loadingContestId}.json`\n    ).then((response) => response.json());\n    const results: {\n      Rank: number;\n      UserScreenName: string;\n      TotalResult: { Score: number };\n    }[] = contestResult.StandingsData;\n    const map = new Map<string, number>();\n    results.forEach((result) => {\n      if (result.TotalResult.Score > 0) {\n        map.set(result.UserScreenName, result.Rank);\n      }\n    });\n    return map;\n  }\n\n  const map = CONTEST_MAP_CACHE.get(contestId);\n  if (!map) {\n    const promise = loadSingleContestMap(contestId);\n    CONTEST_MAP_CACHE.set(contestId, promise);\n    return promise;\n  }\n\n  return map;\n}\n\nexport async function fetchContestResults() {\n  return Promise.all([\n    fetchSingleContestMap(\"abc177\"),\n    // fetchSingleContestMap(\"abc175\"),\n    // fetchSingleContestMap(\"abc176\"),\n  ]);\n}\n","import { Container, CssBaseline, Link, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const RulePage = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <CssBaseline />\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        align=\"center\"\n        color=\"textPrimary\"\n        gutterBottom\n      >\n        ABC Tournament ルール\n      </Typography>\n      <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n        <ul>\n          <li>ABC の結果を使ったトーナメント戦です。</li>\n          <li>\n            各試合は 1 対 1 で行われ、AtCoder の ABC\n            級のコンテストでの順位が高かった方が勝者となり、次の試合に進出します。\n          </li>\n          <li>\n            ABC級のコンテストとはレーティング更新対象が 0 - 1999\n            のコンテストです。\n          </li>\n          <li>\n            同順位の場合は2020年8月29日 19:00\n            JST時点でのレートが高い方を勝者とします。\n          </li>\n          <li>\n            コンテストにおいて以下に該当するユーザーは\n            (コンテストで正の点数を取った人数 + 1) 位となります。\n            <ul>\n              <li>コンテストに参加登録していないユーザー</li>\n              <li>コンテストに参加登録したが1回も提出していないユーザー</li>\n              <li>\n                コンテストに参加登録し、1回以上提出したが点数が得られなかったユーザー\n              </li>\n            </ul>\n          </li>\n          <li>\n            各試合の対象となる ABC は以下のとおりです。\n            <ul>\n              <li>\n                1 回戦 -{\" \"}\n                <Link href=\"https://atcoder.jp/contests/abc177\">\n                  AtCoder Beginner Contest 177\n                </Link>\n              </li>\n              <li>2 回戦以降 - AtCoder からアナウンスがあり次第更新します。</li>\n            </ul>\n          </li>\n        </ul>\n      </Typography>\n    </Container>\n  );\n};\n","import { Box, Link } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { BracketNode } from \"../../models/BracketNode\";\nimport {\n  red,\n  orange,\n  yellow,\n  blue,\n  lightBlue,\n  green,\n  brown,\n  grey,\n} from \"@material-ui/core/colors\";\nimport \"./tournament.scss\";\n\nconst useStyle = makeStyles(() => ({\n  red: {\n    color: red[500],\n  },\n  orange: {\n    color: orange[500],\n  },\n  yellow: {\n    color: yellow[500],\n  },\n  blue: {\n    color: blue[800],\n  },\n  lightBlue: {\n    color: lightBlue[300],\n  },\n  green: {\n    color: green[400],\n  },\n  brown: {\n    color: brown[400],\n  },\n  grey: {\n    color: grey[500],\n  },\n\n  nodeText: {\n    padding: \"3px\",\n    margin: 0,\n    backgroundColor: \"#7a7b7d\",\n    textShadow: \"rgb(34,34,34) 1px 1px 1px\",\n    fontSize: \"14px\",\n    fontFamily: '\"Roboto Light\", sans-serif',\n    borderWidth: 0,\n    borderRadius: \"3px\",\n    minWidth: \"120px\",\n    textAlign: \"center\",\n  },\n  rankBadge: {\n    marginLeft: \"auto\",\n    fontSize: \"10px\",\n  },\n}));\n\nconst RatingName = (props: {\n  children: string;\n  rating: number | undefined;\n}) => {\n  const classes = useStyle();\n  const userId = props.children;\n  const rating = props.rating;\n  if (!rating) {\n    return <p>{userId}</p>;\n  }\n  let c: string;\n  if (rating < 400) {\n    c = classes.grey;\n  } else if (rating < 800) {\n    c = classes.brown;\n  } else if (rating < 1200) {\n    c = classes.green;\n  } else if (rating < 1600) {\n    c = classes.lightBlue;\n  } else if (rating < 2000) {\n    c = classes.blue;\n  } else if (rating < 2400) {\n    c = classes.yellow;\n  } else if (rating < 2800) {\n    c = classes.orange;\n  } else {\n    c = classes.red;\n  }\n  const screenUserId =\n    userId.length <= 13 ? userId : userId.slice(0, 10) + \"...\";\n  return (\n    <Link className={c} href={`https://atcoder.jp/users/${userId}`}>\n      {screenUserId}\n    </Link>\n  );\n};\n\nconst RankedRatingName = (props: {\n  node: BracketNode;\n  rating: number | undefined;\n}) => {\n  const { node, rating } = props;\n  const classes = useStyle();\n  return node.rank ? (\n    <Box display=\"flex\" justifyContent=\"center\" className={classes.nodeText}>\n      <div>\n        <RatingName rating={rating}>{node.name}</RatingName>\n      </div>\n      <Box display=\"flex\" alignItems=\"center\" className={classes.rankBadge}>\n        {node.rank}\n      </Box>\n    </Box>\n  ) : (\n    <div className={classes.nodeText}>\n      <RatingName rating={rating}>{node.name}</RatingName>\n    </div>\n  );\n};\n\ninterface Props {\n  node: BracketNode;\n  getRating: (userId: string) => number | undefined;\n}\n\nexport const GameNode = (props: Props) => {\n  const { node, getRating } = props;\n  const rating = getRating(node.name);\n\n  if (node.children.length === 0) {\n    return <RankedRatingName node={node} rating={rating} />;\n  } else {\n    return (\n      <div className=\"item\">\n        <div className=\"item-parent\">\n          <RankedRatingName node={node} rating={rating} />\n        </div>\n        <div className=\"item-children\">\n          {node.children.map((node, i) => (\n            <div key={i} className=\"item-child\">\n              <GameNode getRating={getRating} node={node} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n","import { BracketNode } from \"../models/BracketNode\";\n\ninterface UserInfo {\n  userId: string;\n  rating: number;\n  rank: number;\n}\n\nconst getDepth = (node: BracketNode, depth: number) => {\n  let maxDepth = depth;\n  node.children.forEach((child) => {\n    maxDepth = Math.max(getDepth(child, depth + 1), maxDepth);\n  });\n  return maxDepth;\n};\n\nconst pickWinner = (userInfoList: UserInfo[]) => {\n  const sorted = userInfoList.sort((a, b) => {\n    if (a.rank === b.rank) {\n      return b.rating - a.rating;\n    }\n    return a.rank - b.rank;\n  });\n  return sorted[0];\n};\n\nconst resolveByDfs = (\n  node: BracketNode,\n  depth: number,\n  maxDepth: number,\n  makeUserInfo: (index: number, userId: string) => UserInfo | undefined\n): BracketNode => {\n  const index = maxDepth - depth - 1;\n  const children = node.children.map((child) =>\n    resolveByDfs(child, depth + 1, maxDepth, makeUserInfo)\n  );\n  const userInfoList = [] as UserInfo[];\n  children.forEach((user) => {\n    const userInfo = makeUserInfo(index, user.name);\n    if (userInfo) {\n      userInfoList.push(userInfo);\n    }\n  });\n\n  if (children.length === 0 || children.length !== userInfoList.length) {\n    return { name: node.name, children };\n  }\n\n  const childrenWithResult = children.map((child, i) => ({\n    ...userInfoList[i],\n    ...child,\n  }));\n  const winner = pickWinner(userInfoList);\n  return { name: winner.userId, children: childrenWithResult };\n};\n\nexport const resolveTournament = (\n  root: BracketNode,\n  makeUserInfo: (index: number, userId: string) => UserInfo | undefined\n) => {\n  const depth = getDepth(root, 0);\n  return resolveByDfs(root, 0, depth, makeUserInfo);\n};\n","import React from \"react\";\nimport { GameNode } from \"./TournamentBracket/GameNode\";\nimport { makeTree } from \"./TournamentBracket/TreeMaker\";\nimport { resolveTournament } from \"../utils/ResultResolver\";\n\ninterface Props {\n  atCoderUserIds: string[];\n  ratingMap?: Map<string, number>;\n  contestResults?: Map<string, number>[];\n}\n\nexport const TournamentBoard = (props: Props) => {\n  const { atCoderUserIds, contestResults, ratingMap } = props;\n\n  const makeUserInfo = (index: number, userId: string) => {\n    if (!contestResults || contestResults.length <= index) {\n      return undefined;\n    }\n    const resultMap = contestResults[index];\n    const nextRank = resultMap.size + 1;\n    const rank = contestResults[index].get(userId) ?? nextRank;\n    const rating = ratingMap?.get(userId) ?? 0;\n    return { userId, rank, rating };\n  };\n\n  const root =\n    atCoderUserIds.length > 0\n      ? makeTree(atCoderUserIds)\n      : { name: \"loading\", children: [] };\n  const resolvedRoot = resolveTournament(root, makeUserInfo);\n\n  return (\n    <GameNode\n      getRating={(userId) => ratingMap?.get(userId)}\n      node={resolvedRoot}\n    />\n  );\n};\n","import { BracketNode } from \"../../models/BracketNode\";\nimport { UNDEFINED_NODE } from \"../../utils/Constants\";\n\nexport const makeTree = (players: string[]): BracketNode => {\n  let leafCount = 1;\n  while (leafCount * 2 <= players.length) {\n    leafCount *= 2;\n  }\n\n  let leafPlayers = [] as BracketNode[];\n  for (let i = 0; i < leafCount; i++) {\n    if (leafCount + i < players.length) {\n      const player1 = players[i];\n      const player2 = players[leafCount + i];\n      leafPlayers.push({\n        name: UNDEFINED_NODE,\n        children: [\n          { name: player2, children: [] },\n          { name: player1, children: [] },\n        ],\n      });\n    } else {\n      leafPlayers.push({\n        name: players[i],\n        children: [],\n      });\n    }\n  }\n\n  let currentPlayers = leafPlayers;\n\n  while (currentPlayers.length > 1) {\n    const nextPlayers = [];\n    for (let i = 0; i < currentPlayers.length; i += 2) {\n      const node1 = currentPlayers[i];\n      if (i + 1 === currentPlayers.length) {\n        nextPlayers.push({ name: UNDEFINED_NODE, children: [node1] });\n      } else {\n        const node2 = currentPlayers[i + 1];\n        nextPlayers.push({ name: UNDEFINED_NODE, children: [node1, node2] });\n      }\n    }\n    currentPlayers = nextPlayers;\n  }\n\n  return currentPlayers[0];\n};\n","export const SEASON_ID = 1;\nexport const DEADLINE = 1598695200;\n\nexport const UNDEFINED_NODE = \"...\";\nexport const MAXIMUM_MEMBER = 128;\n","import {\n  Box,\n  CssBaseline,\n  Grid,\n  Tab,\n  Tabs,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { TournamentBoard } from \"../components/TournamentBoard\";\nimport {\n  fetchContestResults,\n  fetchOrderedUserList,\n  fetchRatingMap,\n} from \"../utils/API\";\nimport { MAXIMUM_MEMBER } from \"../utils/Constants\";\n\nconst formatClass = (index: number) => {\n  if (index === 0) {\n    return \"A\";\n  }\n  if (index < 3) {\n    return `B${index}`;\n  }\n  if (index < 7) {\n    return `C${index - 2}`;\n  }\n  return `D${index - 6}`;\n};\n\ninterface Props {\n  seasonId: string;\n}\n\nexport const Tournament = (props: Props) => {\n  const [atCoderUserIds, setAtCoderUserIds] = useState<string[]>([]);\n  const [ratingMap, setRatingMap] = useState<Map<string, number> | undefined>(\n    undefined\n  );\n  const [contestResults, setContestResults] = useState<\n    Map<string, number>[] | undefined\n  >(undefined);\n  const [selectedDivision, setSelectedDivision] = useState(0);\n\n  useEffect(() => {\n    fetchOrderedUserList(props.seasonId).then((users) =>\n      setAtCoderUserIds(users)\n    );\n  }, [props.seasonId]);\n  useEffect(() => {\n    if (!ratingMap) {\n      fetchRatingMap().then((map) => setRatingMap(map));\n    }\n    if (!contestResults) {\n      fetchContestResults().then((maps) => setContestResults(maps));\n    }\n  });\n\n  const divisionCount = Math.ceil(atCoderUserIds.length / MAXIMUM_MEMBER);\n  const divisionMembers = Math.ceil(\n    atCoderUserIds.length / Math.max(divisionCount, 1)\n  );\n\n  const divisions = [] as string[][];\n  let i = atCoderUserIds.length - 1;\n  while (i >= 0) {\n    const division = [] as string[];\n    while (i >= 0 && division.length < divisionMembers) {\n      division.push(atCoderUserIds[i]);\n      i -= 1;\n    }\n    divisions.push(division.reverse());\n  }\n  divisions.reverse();\n\n  return (\n    <>\n      <CssBaseline />\n      <Grid container justify=\"center\" direction=\"column\">\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          AtCoder Beginner Contest Tournament\n        </Typography>\n        <Typography\n          component=\"h4\"\n          variant=\"h4\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          シーズン 1\n        </Typography>\n        <Typography\n          component=\"div\"\n          variant=\"body1\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          {`参加人数: ${atCoderUserIds.length}`}\n        </Typography>\n        <Tabs\n          value={selectedDivision}\n          onChange={(e, v) => setSelectedDivision(v)}\n          centered\n        >\n          {divisions.map((d, i) => (\n            <Tab label={`CLASS ${formatClass(i)}`} key={i} />\n          ))}\n        </Tabs>\n\n        <Box display=\"flex\" justifyContent=\"center\">\n          <TournamentBoard\n            atCoderUserIds={divisions[selectedDivision] ?? []}\n            ratingMap={ratingMap}\n            contestResults={contestResults}\n          />\n        </Box>\n      </Grid>\n    </>\n  );\n};\n","import {\n  AppBar,\n  Container,\n  createMuiTheme,\n  CssBaseline,\n  Link,\n  MuiThemeProvider,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {\n  HashRouter,\n  Link as RouterLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { RulePage } from \"./pages/RulePage\";\nimport { SubmitPage } from \"./pages/SubmitPage\";\nimport { Tournament } from \"./pages/Tournament\";\nimport { DEADLINE, SEASON_ID } from \"./utils/Constants\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: \"wrap\",\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n    textDecoration: \"none\",\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n  heroContent: {\n    padding: theme.spacing(8, 0, 6),\n  },\n  cardHeader: {\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[700],\n  },\n  cardPricing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    borderTop: `1px solid ${theme.palette.divider}`,\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n}));\nconst App = () => {\n  const classes = useStyles();\n  const now = Date.now() / 1000;\n  return (\n    <HashRouter>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar\n          position=\"static\"\n          color=\"default\"\n          elevation={0}\n          className={classes.appBar}\n        >\n          <Toolbar className={classes.toolbar}>\n            <Typography\n              component={RouterLink}\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              className={classes.toolbarTitle}\n              to=\"/\"\n            >\n              ABC トーナメント\n            </Typography>\n            <nav>\n              {now < DEADLINE && (\n                <Link\n                  component={RouterLink}\n                  variant=\"button\"\n                  color=\"textPrimary\"\n                  to=\"/submit\"\n                  className={classes.link}\n                >\n                  登録\n                </Link>\n              )}\n              <Link\n                component={RouterLink}\n                variant=\"button\"\n                color=\"textPrimary\"\n                to=\"/rule\"\n                className={classes.link}\n              >\n                ルール\n              </Link>\n            </nav>\n          </Toolbar>\n        </AppBar>\n        <Container component=\"main\" maxWidth={false}>\n          <Switch>\n            <Route\n              exact\n              path=\"/tournament/:id([0-9]+)\"\n              render={({ match }) => {\n                const seasonId: string | undefined = match.params.id;\n                return (\n                  <Tournament seasonId={seasonId ?? SEASON_ID.toString()} />\n                );\n              }}\n            />\n            {/*<Route path=\"/submit\">*/}\n            {/*  <SubmitPage />*/}\n            {/*</Route>*/}\n            <Route path=\"/rule\">\n              <RulePage />\n            </Route>\n            <Redirect path=\"/\" to={`/tournament/${SEASON_ID}`} />\n          </Switch>\n        </Container>\n      </MuiThemeProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}